/*! @header UFTool.m @abstract 基础工具类 主要是或许系统的基本信息 此类划分为:硬件信息,软件（系统）信息,网络信息 @author Berry yu  @version 0.5 2012/03/28 Creation  @Copyright 2012 Ufida. All rights reserved. */#import   "WAUFTool.h"#include  <sys/socket.h>#include  <sys/sysctl.h>#include  <net/if.h>#include  <net/if_dl.h>#include  <mach/mach.h> #import   <Foundation/Foundation.h>#import   <UIKit/UIKitDefines.h>#include  <unistd.h>#include  <netdb.h>#include  <arpa/inet.h>#include  <string.h>#include  <SystemConfiguration/CaptiveNetwork.h>//判断设备是iphone还是iphone4的代码  直接用宏来判断方便针对分辨率来用图片资源#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ?   CGSizeEqualToSize(CGSizeMake(640, 960),[[UIScreen mainScreen] currentMode].size) : NO)@implementation CWAUFTool@synthesize familyName,fontName,pointSize,ascender,descender,capHeight,xHeight;/******* 设备硬件  **********/+ (NSString *) getMacAddress{  int                 mib[6];  size_t              len;  char                *buf;  unsigned char       *ptr;  struct if_msghdr    *ifm;  struct sockaddr_dl  *sdl;      mib[0] = CTL_NET;  mib[1] = AF_ROUTE;  mib[2] = 0;  mib[3] = AF_LINK;  mib[4] = NET_RT_IFLIST;      if ((mib[5] = if_nametoindex("en0")) == 0)   {     printf("Error: if_nametoindex error/n");     return NULL;  }      if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0)   {     printf("Error: sysctl, take 1/n");     return NULL;  }      if ((buf = malloc(len)) == NULL)   {     printf("Could not allocate memory. error!/n");     return NULL;  }      if (sysctl(mib, 6, buf, &len, NULL, 0) < 0)  {     printf("Error: sysctl, take 2");     free(buf);     return NULL;  }      ifm = (struct if_msghdr *)buf;  sdl = (struct sockaddr_dl *)(ifm + 1);  ptr = (unsigned char *)LLADDR(sdl);  NSString *outstring = [NSString stringWithFormat:@"%02x:%02x:%02x:%02x:%02x:%02x",                          *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];  free(buf);   return [outstring uppercaseString];}+ (NSString *) advertisingIdentifier{  NSString *identifierForVendorString = @"";    ASIdentifierManager *asIdentifierManager = [ASIdentifierManager sharedManager];   if ([asIdentifierManager respondsToSelector:@selector(advertisingIdentifier)])  {      NSUUID *uuid = [ASIdentifierManager sharedManager].advertisingIdentifier;      return [uuid UUIDString];  }  return identifierForVendorString;}#pragma mark 获取剩余内存+ (double)availableMemory{ vm_statistics_data_t vmStats; mach_msg_type_number_t infoCount = HOST_VM_INFO_COUNT; kern_return_t kernReturn = host_statistics(mach_host_self(),                             HOST_VM_INFO, (host_info_t)&vmStats, &infoCount);     if(kernReturn != KERN_SUCCESS) {  return NSNotFound; }        return ((vm_page_size * vmStats.free_count) / 1024.0) / 1024.0;}//+ (NSString*)getUniqueIdentifier //{//  //  NSString *str = [[UIDevice currentDevice] uniqueIdentifier];//  return str;//}+ (NSString*)getLocalizedModel{  NSString *str = [[UIDevice currentDevice] localizedModel];  return str;}+ (NSString*)getSystemVersion{     NSString *str = [[UIDevice currentDevice] systemVersion];  return str; }+ (NSString*)getSystemName{  NSString *str = [[UIDevice currentDevice] systemName];  return str;}+ (NSString*)getModel{  NSString *str = [[UIDevice currentDevice] model];  return str;}/******* 设备系统（软件）  **********/#pragma mark 设备系统（软件）+ (BOOL) isIPodTouch{  int model = [CWAUFTool detectDevice];  if (model == MODEL_IPOD_TOUCH || model == MODEL_IPAD)  {      //|| model == MODEL_IPHONE_SIMULATOR){    return YES;  }      else  {    return NO;  }    }+ (BOOL) isIphone{  int model = [CWAUFTool detectDevice];  if ( model == MODEL_IPHONE      || model == MODEL_IPHONE_3G      || model == MODEL_IPHONE_3GS      || model == MODEL_IPHONE_4      || model == MODEL_IPHONE_4S      || model == MODEL_IPHONE_5      || model == MODEL_IPHONE_5C      || model == MODEL_IPHONE_5S)  {    return YES;  }  else  {    return NO;  }  }+ (uint) detectDevice{  NSString *model= [[UIDevice currentDevice] model];        // Some iPod Touch return "iPod Touch", others just "iPod"      NSString *iPodTouch = @"iPod Touch";  NSString *iPodTouchLowerCase = @"iPod touch";  NSString *iPodTouchShort = @"iPod";  NSString *iPad = @"iPad";      NSString *iPhoneSimulator = @"iPhone Simulator";      uint detected;  // iPhone simulator    if ([model compare:iPhoneSimulator] == NSOrderedSame)   {    detected = MODEL_IPHONE_SIMULATOR;  }  else if ([model compare:iPad] == NSOrderedSame)   {    // iPad    detected = MODEL_IPAD;    struct utsname u;        // u.machine could be "i386" for the simulator, "iPod1,1" on iPod Touch, "iPhone1,1" on iPhone V1 & "iPhone1,2" on iPhone3G        uname(&u);    if (!strcmp(u.machine, "iPad1,1"))    {      detected = MODEL_IPAD;    }    else if (!strcmp(u.machine, "iPad2,1")             || !strcmp(u.machine, "iPad2,2")             || !strcmp(u.machine, "iPad2,3")             || !strcmp(u.machine, "iPad2,4"))    {      detected = MODEL_IPAD2;    }    else if (!strcmp(u.machine, "iPad3,1")             || !strcmp(u.machine, "iPad3,2")             || !strcmp(u.machine, "iPad3,3"))    {      detected = MODEL_NEWPAD;    }    else if (!strcmp(u.machine, "iPad3,4")             || !strcmp(u.machine, "iPad3,5")             || !strcmp(u.machine, "iPad3,6"))    {      detected = MODEL_IPAD4;    }    else if (!strcmp(u.machine, "iPad4,1")             || !strcmp(u.machine, "iPad4,2"))    {      detected = MODEL_IPADAIR;    }        else if (!strcmp(u.machine, "iPad2,5")             || !strcmp(u.machine, "iPad2,6")             || !strcmp(u.machine, "iPad2,7"))    {      detected = MODEL_IPADMINI;    }    else if (!strcmp(u.machine, "iPad4,4")             || !strcmp(u.machine, "iPad4,5"))    {      detected = MODEL_IPADMINI_RETINA;    }  }   else if ([model compare:iPodTouch] == NSOrderedSame ||           [model compare:iPodTouchLowerCase] == NSOrderedSame)  {    detected = MODEL_IPOD_TOUCH;    struct utsname u;    // u.machine could be "i386" for the simulator, "iPod1,1" on iPod Touch, "iPhone1,1" on iPhone V1 & "iPhone1,2" on iPhone3G      uname(&u);    NSLog(@"%s",u.machine);    if(!strcmp(u.machine, "iPod5,1"))    {      detected = MODEL_IPOD_TOUCH5;    }      }  else if ([model compare:iPodTouchShort] == NSOrderedSame)  {    // iPod Touch    detected = MODEL_IPOD;  }  else  {    // Could be an iPhone V1 or iPhone 3G (model should be "iPhone")    struct utsname u;            // u.machine could be "i386" for the simulator, "iPod1,1" on iPod Touch, "iPhone1,1" on iPhone V1 & "iPhone1,2" on iPhone3G            uname(&u);            if (!strcmp(u.machine, "iPhone1,1"))    {      detected = MODEL_IPHONE;    }    else if(!strcmp(u.machine, "iPhone1,2"))    {      detected = MODEL_IPHONE_3G;    }    else if(!strcmp(u.machine, "iPhone2,1"))    {      detected = MODEL_IPHONE_3GS;    }    else if(!strcmp(u.machine, "iPhone3,1"))    {      detected = MODEL_IPHONE_4;    }    else if(!strcmp(u.machine, "iPhone4,1"))    {      detected = MODEL_IPHONE_4S;    }    else if (!strcmp(u.machine, "iPhone5,1"))    {      detected = MODEL_IPHONE_5;    }    else if (!strcmp(u.machine, "iPhone5,2"))    {      detected = MODEL_IPHONE_5;    }    else if (!strcmp(u.machine, "iPhone5,3"))    {      detected = MODEL_IPHONE_5C;    }    else if (!strcmp(u.machine, "iPhone5,4"))    {      detected = MODEL_IPHONE_5C;    }    else if(!strcmp(u.machine, "iPhone6,1"))    {      detected = MODEL_IPHONE_5S;    }    else if(!strcmp(u.machine, "iPhone6,2"))    {      detected = MODEL_IPHONE_5S;    }    else    {      detected = MODEL_UNKNOWN;          }  }  return detected;}+ (NSString *) getDeviceName:(BOOL)ignoreSimulator{      NSString *returnValue = @"Unknown";      switch ([CWAUFTool detectDevice])   {    case MODEL_IPHONE_SIMULATOR:    if (ignoreSimulator)     {      returnValue = @"iPhone 3G";    } else     {        returnValue = @"iPhone Simulator";    }      break;    case MODEL_IPOD_TOUCH:      returnValue = @"iPod Touch";      break;    case MODEL_IPOD:    returnValue = @"iPod";    break;    case MODEL_IPHONE:      returnValue = @"iPhone";      break;    case MODEL_IPHONE_3G:      returnValue = @"iPhone 3G";      break;    case MODEL_IPHONE_4:      returnValue = @"iPhone 4";      break;    case MODEL_IPHONE_4S:      returnValue = @"iPhone 4S";      break;    case MODEL_IPHONE_5:      returnValue = @"iPhone 5";      break;    case MODEL_IPHONE_5C:      returnValue = @"iPhone 5C";      break;    case MODEL_IPHONE_5S:      returnValue = @"iPhone 5S";      break;    case MODEL_IPAD:      returnValue = @"iPad";      break;    case MODEL_IPAD2:      returnValue = @"iPad2";      break;    case MODEL_NEWPAD:      returnValue = @"the new iPad";      break;    case MODEL_IPAD4:      returnValue = @"iPad4";      break;    case MODEL_IPADAIR:      returnValue = @"iPad air";      break;    case MODEL_IPADMINI:      returnValue = @"iPad mini";      break;    case MODEL_IPADMINI_RETINA:      returnValue = @"iPad mini2";      break;    default:      break;  }    return returnValue;}- (UIFont *)boldFont{    //First get the name of the font (unnecessary, but used for clarity)  //  NSString *afontName = self.fontName;    //Then append "-Bold" to it.  NSString *boldFontName = [afontName stringByAppendingString:@"-Bold"];    //Then see if it returns a valid font  UIFont *boldFont = [UIFont fontWithName:boldFontName size:self.pointSize];    //If it's valid, return it  if(boldFont)  {    return boldFont;  }    //Seems like in some cases, you have to append "-BoldMT"  boldFontName = [afontName stringByAppendingString:@"-BoldMT"];  boldFont = [UIFont fontWithName:boldFontName size:self.pointSize];    //Here you can check if it was successful, if it wasn't, then you can throw an exception or something.  return boldFont;}+ (NSString *)getIMSI{    return @"";}+ (NSString *)getLanuageState{    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];   NSArray *languages = [defaults objectForKey:@"AppleLanguages"];   NSString *str = [languages objectAtIndex:0];   return str;}+(NSString *)getIpAddress{    NSString *ipAddress;  char baseHostName[255];    gethostname(baseHostName, 255); // 获得本机名字  struct hostent *host = gethostbyname(baseHostName); // 将本机名字转换成主机网络结构体 struct hostent    if (host == NULL)   {    ipAddress = nil;  }   else   {    struct in_addr **list = (struct in_addr **)host->h_addr_list;    char ip[255];            strcpy(ip, inet_ntoa(*list[0])); // 获得本机IP地址        ipAddress = [[NSString alloc] initWithUTF8String:ip];      }     return ipAddress;}+ (NSString*)getIMEI{  return @"";}/* China - CN * MCC    MNC    Brand    Operator                Status        Bands (MHz)                                    References and notes * 460    00            China Mobile            Operational    GSM 900/GSM 1800 UMTS (TD-SCDMA) 1880/2010 * 460    01            China Unicom            Operational    GSM 900/GSM 1800/ UMTS 2100                    CDMA network sold to China Telecom, WCDMA commercial trial started in May 2009 and in full commercial operation as of October 2009. * 460    02            China Mobile            Operational    GSM 900/GSM 1800/ UMTS (TD-SCDMA) 1880/2010     * 460    03            China Telecom            Operational    CDMA 800/cdma evdo 2100     * 460    05            China Telecom            Operational         * 460    06            China Unicom            Operational    GSM 900/GSM 1800/UMTS 2100     * 460    07            China Mobile            Operational    GSM 900/GSM 1800/UMTS (TD-SCDMA) 1880/2010     * 460    20            China Tietong            Operational    GSM-R     * NA    NA            China Telecom&China Unicom    Operational         */+ (NSString*)getOperator:(NSString*)aimsi{  if (aimsi == nil || [aimsi length]==0 || [aimsi isEqualToString:@"SIM Not Inserted"] ) {    return @"Unknown";  }  else {    if ([[aimsi substringWithRange:NSMakeRange(0, 3)] isEqualToString:@"460"]) {      NSInteger MNC = [[aimsi substringWithRange:NSMakeRange(3, 2)] intValue];      switch (MNC) {        case 00:        case 02:        case 07:          return @"China Mobile";          break;        case 01:        case 06:              return @"China Unicom";          break;        case 03:        case 05:              return @"China Telecom";          break;        case 20:          return @"China Tietong";          break;        default:          break;      }    }  }  return @"Unknown";}+ (NSString *)getAppScreenResolution{    CGRect rect = [[UIScreen mainScreen] bounds];    CGSize size = rect.size;  NSInteger width = (NSInteger)size.width;  NSInteger height = (NSInteger)size.height;    NSString *strResolution = [NSString stringWithFormat:@"%i*%i",width,height];   return strResolution;}+ (NSString *) getDeviceScreenResolution:(BOOL)ignoreSimulator{  NSString *returnValue = @"Unknown";    switch ([CWAUFTool detectDevice])   {    case MODEL_IPHONE_SIMULATOR:    if (ignoreSimulator)     {      returnValue = @"iPhone Simulator";    }     else     {      returnValue = @"480*320";    }    break;    case MODEL_IPOD_TOUCH:    returnValue = @"480*320";    break;    case MODEL_IPOD:    returnValue = @"960*640";    break;    case MODEL_IPOD_TOUCH5:      returnValue = @"1136*640";    break;    case MODEL_IPHONE:    returnValue = @"480*320";    break;    case MODEL_IPHONE_3G:    returnValue = @"480*320";    break;    case MODEL_IPHONE_3GS:      returnValue = @"480*320";      break;    case MODEL_IPHONE_4:    returnValue = @"960*640";    break;    case MODEL_IPHONE_4S:    returnValue = @"960*640";    break;    case MODEL_IPHONE_5:    returnValue = @"1136*640";    break;    case MODEL_IPHONE_5C:      returnValue = @"1136*640";      break;    case MODEL_IPHONE_5S:      returnValue = @"1136*640";      break;    case MODEL_IPAD:    returnValue = @"1024*768";      break;    case MODEL_IPAD2:      returnValue = @"1024*768";      break;    case MODEL_NEWPAD:      returnValue = @"2048*1536";      break;    case MODEL_IPAD4:      returnValue = @"2048*1536";      break;    case MODEL_IPADAIR:      returnValue = @"2048*1536";      break;    case MODEL_IPADMINI:      returnValue = @"1024*768";      break;    case MODEL_IPADMINI_RETINA:      returnValue = @"2048*1536";      break;    default:    break;  }    return returnValue;}+ (NSString *)getDeviceScreenSize:(BOOL)ignoreSimulator{    NSString *returnValue = @"Unknown";    switch ([CWAUFTool detectDevice])   {    case MODEL_IPHONE_SIMULATOR:    if (ignoreSimulator)     {      returnValue = @"iPhone Simulator";    }     else     {      returnValue = @"3.5";    }    break;    case MODEL_IPOD_TOUCH:    returnValue = @"3.5";    break;    case MODEL_IPOD:    returnValue = @"3.5";    break;    case MODEL_IPOD_TOUCH5:      returnValue = @"4.0";      break;          case MODEL_IPHONE:    returnValue = @"3.5";    break;    case MODEL_IPHONE_3G:    returnValue = @"3.5";    break;    case MODEL_IPHONE_3GS:      returnValue = @"3.5";      break;    case MODEL_IPHONE_4:    returnValue = @"3.5";    break;    case MODEL_IPHONE_4S:    returnValue = @"3.5";    break;    case MODEL_IPHONE_5:      returnValue = @"4.0";      break;    case MODEL_IPHONE_5C:      returnValue = @"4.0";      break;    case MODEL_IPHONE_5S:      returnValue = @"4.0";      break;    case MODEL_IPAD:    returnValue = @"9.7";      break;    case MODEL_IPAD2:      returnValue = @"9.7";      break;    case MODEL_NEWPAD:      returnValue = @"9.7";      break;    case MODEL_IPAD4:      returnValue = @"9.7";      break;    case MODEL_IPADAIR:      returnValue = @"9.7";      break;    case MODEL_IPADMINI:      returnValue = @"7.9";      break;    case MODEL_IPADMINI_RETINA:      returnValue = @"7.9";      break;    default:    break;  }  return returnValue;}+ (NSString *)getDeviceType{  struct utsname systemInfo;  uname(&systemInfo);  return [NSString stringWithCString:systemInfo.machine encoding:NSUTF8StringEncoding];}+ (BOOL)isWifiAble{  Reachability *reachability = [[Reachability alloc] init];  BOOL isReachable = [reachability isReachable];   return isReachable;}#pragma mark 版本相关+ (NSString *) appVersion{  return [[NSBundle mainBundle] objectForInfoDictionaryKey: @"CFBundleShortVersionString"];}+ (NSString *) appbuild{  return [[NSBundle mainBundle] objectForInfoDictionaryKey: (NSString *)kCFBundleVersionKey];}+ (NSString *) versionBuild{  NSString * version = [self appVersion];  NSString * build = [self appbuild];    NSString * versionBuild = [NSString stringWithFormat: @"v%@", version];    if (![version isEqualToString: build]) {    versionBuild = [NSString stringWithFormat: @"%@(%@)", versionBuild, build];  }    return versionBuild;}+ (BOOL) isRetinaDisplay{  int scale = 1.0;  UIScreen *screen = [UIScreen mainScreen];  if([screen respondsToSelector:@selector(scale)])  {    scale = screen.scale;  }    if(scale == 2.0f)  {    return YES;  }  else  {    return NO;  }}+ (NSInteger) compareCurrentAppVersionWithString:(NSString *)aNewVersion{  //当前 app 版本  NSString *currentVersion = [CWAUFTool appVersion];  // 将版本中的.抹掉  NSString *cvWithoutDot = [currentVersion stringByReplacingOccurrencesOfString:@"." withString:@""];  NSString *aNewVersionWithoutDot = [aNewVersion stringByReplacingOccurrencesOfString:@"." withString:@""];  // 如果两个版本抹掉点后位数不等 将短位数的 低位补0  int dif = aNewVersionWithoutDot.length - cvWithoutDot.length;    if (dif>0) {    for (int i = 0; i<dif; i++) {      cvWithoutDot= [cvWithoutDot stringByAppendingString:@"0"];    }  }  else if(dif<0){    for (int i = 0; i<dif; i++) {      aNewVersionWithoutDot= [aNewVersionWithoutDot stringByAppendingString:@"0"];    }  }    int cvNumber = [cvWithoutDot intValue];  int nvNumber = [aNewVersionWithoutDot intValue];    return (cvNumber - nvNumber);}@end